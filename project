#include <iostream>
#include <string>
#include <unordered_map>
#include <unordered_map>
#include <vector>
#include <utility>
#include <set>
using namespace std;

class AdjacencyList {
    unordered_map<string, vector<pair <string, int> > > list;
    set<string> vertices;
    
    public:
    void Insert();
    void getDestinations(string location);
    void BuildGraph(); 
};
void heapify(vector<pair<string, int> >& v, int n, int start)
{
    int big = start;
    int left = 2*start + 1;
    int right = 2*start + 2;

    if (left < n && v[left].second > v[big].second) {
        big = left;
    }
 
    if (right < n && v[right].second > v[big].second) {
        big = right;
    }
 
    if (big != start) {
        swap(v[start], v[big]);
        heapify(v, n, big);
    }
}
void buildHeap(vector<pair<string, int> >& v, int size) {
    for (int i = size / 2 - 1; i >= 0; i--) {
        heapify(v, size, i);
    }
}
void heapSort(vector<pair<string, int> >& v)
{
    int size = v.size();
    buildHeap(v, size);
    for (int i = size - 1; i > 0; i--) {
        swap(v[0], v[i]);
        heapify(v, i, 0);
    }
}
void superSort(vector<pair<string, int> >& v) {
    bool sorted = true;
    for(int i = 0; i < v.size()-1; i++) {
        if(v[i] > v[i+1]) {
            sorted = false;
        }
    }
    if(sorted) {
        cout << "sorted!" << endl;
        return;
    }

    heapSort(v);
}
void AdjacencyList::getDestinations(string location) {
    vector<pair<string, int> > destinations = list[location];
    superSort(destinations);
    for(int i = 0; i < destinations.size(); i++) {
        cout << "Possible Destination: " << destinations[i].first << " Price: $" << destinations[i].second << endl;
    }
}

int main() {
    cout << "Welcome to MyFeetHurt: " << endl << "Enter your current location: " << endl;
    
    return 0;
}
